@inject IStringLocalizer<App> Localizer

@if (Data is not null && Owner is not null)
{
    <div style="display:flex;flex-direction:column">
        <div class="card" style="border-color: @Data.FrameColor;">
            <div class="card-info" style="flex-direction: column;">
                <div class="heading" style="font-size: @Data.Identification().LongHeadingFontSize();">
                    @Data.Identification()
                </div>
                <VehicleImage CssClass="picture-front" Image="@Data.OriginalImage" ImageUrl="@Data.OriginalImageUrl" />
                <div style="display: flex; flex-direction: row">
                    <div style="display: flex; flex-direction: column">
                        <div class="marking">
                            <div class="label">@Localizer.Label("Marking")</div>
                            <OwnerMarking Marking="@Data.Marking" />
                        </div>
                        <div class="owner">
                            <div class="label">@Localizer.Label("Owner")</div>
                            @Owner.OwnerName<br />
                            @Owner.EmailAddress<br />
                            @Owner.PhoneNumber
                        </div>
                    </div>
                    <div style="display: flex; flex-direction: column">
                        <div class="model-make">
                            @*<div class="label">@Localizer.Label("Manufacturer")</div>
                                <div>@Data.ModelManufacturer</div>*@
                        </div>
                        <div>
                            <UicLabel Data="@Data" FontSize="10" />
                        </div>
                    </div>
                    <div class="model-number">
                        @*<div class="label">@Localizer.Label("Catalog number")</div>
                            <div>@Data.ModelNumber</div>*@
                    </div>
                </div>
            </div>
        </div>

        <div style="display: block; transform: rotate(180deg); border-color: @Data.FrameColor;" class="card">
            <div class="card-info" style="flex-direction: row;">

                <div style="width: 8.4cm">
                    <div class="heading" style="width: 8.4cm;font-size: @Data.Identification().ShortHeadingFontSize() ">
                        @Data.Identification()
                    </div>
                    <div style="display: flex; flex-direction: row; border-bottom: 1px solid black">
                        @if (Data.Epoch.HasValue())
                        {
                            <div style="border-right: 1px solid black" class="property">
                                <span class="label">@Localizer.Label("Epoch")</span><br />
                                <span class="value">@Data.Epoch</span>
                            </div>
                        }
                        <div class="property">
                            <span class="label">@Localizer.Label("Operating period")</span><br />
                            <span class="value">@Data.OperatingFromYear - @Data.OperatingUptoYear</span>
                        </div>
                    </div>
                    <div style="display: flex; flex-direction: row; border-bottom: 1px solid black">
                        @if (Data.LoadLimit > 0)
                        {
                            <div style="border-right: 1px solid black" class="property">
                                <span class="label">@Localizer.Label("Max")</span><br />
                                <span class="value-sm">@Data.LoadLimit t</span>
                            </div>

                        }
                        @if (Data.LoadVolume > 0)
                        {
                            <div style="border-right: 1px solid black" class="property">
                                <span class="label">@Localizer.Label("Volume")</span><br />
                                <span class="value-sm">@Data.LoadVolume m³</span>
                            </div>
                        }
                        @if (Data.Length > 0)
                        {
                            <div class="property">
                                <span class="label">@Localizer.Label("Length")</span><br />
                                <span class="value-sm">@Data.Length m</span>
                            </div>
                        }
                    </div>
                    <div style="display: flex; flex-direction: row; border-bottom: 1px solid black">
                        @if (Data.MaxSpeed > 0)
                        {
                            <div style="border-right: 1px solid black" class="property">
                                <span class="label">@Localizer.Label("Top speed")</span><br />
                                <span class="value-sm">@Data.MaxSpeed  @Localizer[Data.SpeedUnit.ToString()]</span>
                            </div>
                        }
                        <div class="property">
                            <span class="label">@Localizer.Label("Interoperability")</span><br />
                            <span class="value-sm">@Data.Interoperability</span>
                            <span class="value-sm">@Data.CountryRegistrationNumber <u>@Data.CountryCodeOfRegistration</u>-@Data.OperatorSignature</span>
                        </div>
                    </div>
                    @if (Data.LoadingInstructions.HasValue())
                    {
                        <div class="property" style="border-bottom: 1px solid black; padding-bottom: 4pt" >
                            <span class="label">@Localizer.Label("Loading instructions")</span><br />
                            <div class="value-sm" style="font-size: 9pt; line-height: 9pt">@Data.LoadingInstructions</div>
                        </div>
                    }
                    <VehicleImage CssClass="picture-back" Image="@Data.ModelImage" ImageUrl="@Data.ModelImageUrl" />
                </div>
                <div class="pocket">
                    @if (@Data.HasHomeStation)
                    {
                        <div class="homestation" style="color: @Data.HomeStation.Region.Color().TextColor(); background-color: @Data.HomeStation.Region.Color();">
                            <div style="padding-top: 0.5cm; font-size: 60%">@Data.HomeStation.CountryCode.HomeStationLabel()</div>
                            <div>@Data.HomeStation.Name</div>
                            @if (!string.IsNullOrWhiteSpace(Data.HomeStation.CountryCode))
                            {
                                <div>[@Data.HomeStation.CountryCode]</div>
                            }
                        </div>
                    }
                    else
                    {
                        <div>
                            <div class="pocket-text" style="padding-top: 3cm">
                                @Localizer.Label("Waybill or vehicle schedule")
                            </div>
                        </div>

                    }
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public CargoWagon? Data { get; set; }
    [Parameter] public Owner? Owner { get; set; }

}
