@inject IStringLocalizer<App> Localizer


@if (Data is not null && Data.PrintOptions.PrintInventoryCard)
{
    <div style="width: 105mm; height: 60mm; border-color: @Data.">
        <div class="inventory-card" style="border-color: @Data.FrameColor">
            <h1>
                @Localizer["InventoryCard"]
            </h1>
            <div class="vehicle">
                <VehicleImage Image="@Data.ModelImage" ImageUrl="@Data.ModelImageUrl" CssClass="inventory-vehicle" />

            </div>

            <div class="operator" style="color:@Data.BackColor.DarkTextColor()">
                <span>@Data.OperatorSignature</span>
                <span>@Data.VehicleClass</span>
            </div>
            <div class="item vehicle-number" style="font-size:@Data.VehicleNumber.WagonNumberFontSize()">
                @Data.VehicleNumberWithControlDigit()
            </div>
            <div class="item model-make">
                <span>@Data.ModelManufacturer</span>
                <span>@Data.ModelNumber</span>
            </div>
            @if (Data is Loco loco && loco.Address.HasValue)
            {
                <div class="item dcc-address">
                    DCC <span>@loco.Address</span>
                </div>
            }
            @if (!string.IsNullOrWhiteSpace(Data.Marking.InventoryNumber))
            {
                <div class="item owner-marking">
                    <OwnerMarking Marking="@Data.Marking" />
                </div>
            }
            <div class="item owner-name">
                <div><strong>@Localizer.Label("Owner"):</strong></div>
                <div>@Owner?.OwnerName</div>
                <div>@Owner?.PhoneNumber</div>
                <div class="owner-email">@Owner?.EmailAddress</div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public Vehicle? Data { get; set; }
    [Parameter] public Owner? Owner { get; set; }

}
