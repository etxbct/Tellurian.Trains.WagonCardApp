@page "/cargowagon"
@inject IStringLocalizer<App> Localizer
@inject ILocalStorageService LocalStorage
@inject NavigationManager Navigator
@inject IBlazorDownloadFileService BlazorDownloadFileService

<h3>@Localizer["CreateFreightWagonCard"]</h3>
@if (!HasData)
{

}
else
{
    @if (!string.IsNullOrWhiteSpace(ErrorMessage))
    {
        <div style="color:red; background-color: yellow; padding: 5pt">
            <h4>@Localizer["ErrorInUploadedJsonFile"]</h4>
            <p>@ErrorMessage  <button @onclick="@Clear">@Localizer["Clear"]</button></p>

        </div>
    }

    <div style="display:flex;flex-direction:row">
        <div>
            <CargoWagonPreview Data="@Data" Owner="@Owner" />
        </div>
        <div>
            <EditForm Model="@Data" OnValidSubmit="OnValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <h4 style="padding-left: 15em">@Localizer["DataOriginal"]</h4>

                <div>
                    <label class="inputlabel" for="OperatorSignature">@Localizer["OperatorSignature"]</label>
                    <InputText class="inputshort" id="OperatorSignature" @bind-Value="@Data.OperatorSignature"></InputText>
                </div>
                <div>
                    <label class="inputlabel" for="VehicleClass">@Localizer["VehicleClass"]</label>
                    <InputText class="inputshort" id="VehicleClass" @bind-Value="@Data.VehicleClass"></InputText>
                </div>
                <div>
                    <label class="inputlabel" for="InteroperabilityCode">@Localizer["InteroperabilityCode"]</label>
                    <InputNumber class="inputshort" id="InteroperabilityCode" @bind-Value="@Data.InteroperatbilityNumber"></InputNumber>
                </div>
                <div>
                    <label class="inputlabel" for="CountryRegistrationNumber">@Localizer["CountryRegistrationNumber"]</label>
                    <InputNumber class="inputshort" id="CountryRegistrationNumber" @bind-Value="@Data.CountryRegistrationNumber"></InputNumber>
                </div>
                <div>
                    <label class="inputlabel" for="VehicleNumber">@Localizer["VehicleNumber"]</label>
                    <InputText class="inputwide" id="VehicleNumber" @bind-Value="@Data.VehicleNumber"></InputText>
                </div>
                <div>
                    <label class="inputlabel" for="WagonColour">@Localizer["WagonColour"]</label>
                    <input id="WagonColour" type="color" @bind="@Data.WagonColor" />
                </div>
                <div>
                    <label class="inputlabel" for="epoch">@Localizer["Epoch"]</label>
                    <InputText class="inputshort" id="epoch" @bind-Value="@Data.Epoch"></InputText>
                </div>
                <div>
                    <label class="inputlabel" for="IsRivConformant">@Localizer["IsRivConformant"]</label>
                    <InputCheckbox class="inputshort" id="IsRivConformant" @bind-Value="@Data.IsRivConformant"></InputCheckbox>
                </div>
                <div>
                    <label class="inputlabel" for="IsTenConformant">@Localizer["IsTenConformant"]</label>
                    <InputCheckbox class="inputshort" id="IsTenConformant" @bind-Value="@Data.IsTenConformant"></InputCheckbox>
                </div>
                <div>
                    <label class="inputlabel" for="from">@Localizer["Operating period in this design"]</label>
                    <InputNumber class="inputshort" id="fromYear" @bind-Value="@Data.OperatingFromYear"></InputNumber>
                    -
                    <InputNumber class="inputshort" id="uptoYear" @bind-Value="@Data.OperatingUptoYear"></InputNumber>
                </div>
                <div>
                    <label class="inputlabel" for="speed">@Localizer["TopSpeed"]</label>
                    <InputNumber class="inputshort" id="speed" @bind-Value="@Data.MaxSpeed"></InputNumber>
                    <InputRadioGroup Name="SpeedUnit" DisplayName="@Localizer["SpeedUnit"]" @bind-Value="@Data.SpeedUnit">
                        <InputRadio Value="SpeedUnit.KmPerHour" Name="SpeedUnit" />@Localizer[SpeedUnit.KmPerHour.ToString()]
                        <InputRadio Value="SpeedUnit.MilesPerHour" Name="SpeedUnit" />@Localizer[SpeedUnit.MilesPerHour.ToString()]
                    </InputRadioGroup>
                </div>
                <div>
                    <label class="inputlabel" for="length">@Localizer["LengthOverBuffers"]</label>
                    <InputNumber class="inputshort" id="length" @bind-Value="@Data.Length"></InputNumber> m
                </div>
                <div>
                    <label class="inputlabel" for="weight">@Localizer["LoadLimit"]</label>
                    <InputNumber class="inputshort" id="weight" @bind-Value="@Data.LoadLimit"></InputNumber> t
                </div>
                <div>
                    <label class="inputlabel" for="weight">@Localizer["LoadVolume"]</label>
                    <InputNumber class="inputshort" id="weight" @bind-Value="@Data.LoadVolume"></InputNumber> m³
                </div>
                <div>
                    <label class="inputlabel" for="original">@Localizer["OriginalImageUrl"]</label>
                    <InputText class="inputurl" id="original" @bind-Value="@Data.OriginalImageUrl"></InputText>
                </div>

                <h4 style="padding-left: 15em">@Localizer["Home station"]</h4>
                <div>
                    <label class="inputlabel" for="StationName">@Localizer["StationName"]</label>
                    <InputText class="inputurl" id="StationName" @bind-Value="@Data.HomeStation.Name"></InputText>
                </div>
                <div>
                    <label class="inputlabel" for="Country">@Localizer["Country"]</label>
                    <InputRadioGroup id="Country" Name="Country" DisplayName="@Localizer["Country"]" @bind-Value="@Data.HomeStation.CountryCode">
                        @foreach (var countryCode in RegionExtensions.CountryCodes)
                        {
                        <InputRadio Value="countryCode" Name="Country" />
                        <span class="inputradio"> @countryCode</span>
                        }
                </InputRadioGroup>
            </div>
            <div>
                <label class="inputlabel" for="Region">@Localizer["Region"]</label>
                <InputRadioGroup id="Region" Name="Region" DisplayName="@Localizer["Region"]" @bind-Value="@Data.HomeStation.Region">
                    @foreach (var region in RegionExtensions.Regions)
                        {
                        <InputRadio Value="region.Id" Name="Region" />

                        <span class="inputradio"> @Localizer[region.ResourceKey]</span>
                        }
                </InputRadioGroup>

            </div>

            <h4 style="padding-left: 15em">@Localizer["DataModel"]</h4>
            <div>
                <label class="inputlabel" for="ModelManufacturer">@Localizer["ModelManufacturer"]</label>
                <input id="ModelManufacturer" @bind="@Data.ModelManufacturer" />
            </div>
            <div>
                <label class="inputlabel" for="ModelNumber">@Localizer["ModelNumber"]</label>
                <input id="ModelNumber" @bind="@Data.ModelNumber" />
            </div>

            <div>
                <label class="inputlabel" for="model">@Localizer["ModelImageUrl"]</label>
                <InputText class="inputurl" id="model" @bind-Value="@Data.ModelImageUrl"></InputText>
            </div>

            <h4 style="padding-left: 15em">@Localizer["OwnersMarking"]</h4>

            <div>
                <label class="inputlabel" for="UseMarking">@Localizer["UseMarking"]</label>
                <input type="checkbox" id="UseMarking" @bind="@Marking.UseMarking" />
            </div>

            @if (Marking.UseMarking)
                {
                    @if (Marking.ShowOwnerIcon())
                    {
                        <div>
                            <label class="inputlabel" for="model">@Localizer["OwnerImageUrl"]</label>
                            <InputText class="inputurl" id="model" @bind-Value="@Marking.IconHref"></InputText>
                        </div>
                    }
                    @if (Marking.ShowInventoryNumber())
                    {
                        <div>
                            <label class="inputlabel" for="InventoryNumber">@Localizer["InventoryNumber"]</label>
                            <input id="InventoryNumber" @bind="@Marking.InventoryNumber" />
                        </div>
                    }
                    @if (Marking.ShowInventoryNumber() || Marking.ShowColourMarkings())
                    {
                        <div>
                            <label class="inputlabel" for="Colour2">@Localizer["Colour1"]</label>
                            <input id="Colour2" type="color" @bind="@Marking.Color1" />
                        </div>
                    }
                    @if (Marking.ShowColourMarkings())
                    {
                        <div>
                            <label class="inputlabel" for="Colour2">@Localizer["Colour2"]</label>
                            <input id="Colour2" type="color" @bind="@Marking.Color2" />
                        </div>
                        <div>
                            <label class="inputlabel" for="Colour3">@Localizer["Colour3"]</label>
                            <input id="Colour3" type="color" @bind="@Marking.Color3" />
                        </div>
                    }
                }


                <h4 style="padding-left: 15em">@Localizer["Owner"]</h4>
                <div>
                    <label class="inputlabel" for="owner">@Localizer["OwnerName"]</label>
                    <InputText class="inputwide" id="owner" @bind-Value="@Owner.OwnerName"></InputText>
                </div>
                <div>
                    <label class="inputlabel" for="email">@Localizer["EmailAddress"]</label>
                    <input type="email" class="inputwide" id="email" @bind="@Owner.EmailAddress" />
                </div>
                <div>
                    <label class="inputlabel" for="phone">@Localizer["PhoneNumber"]</label>
                    <input type="tel" class="inputwide" id="phone" @bind="@Owner.PhoneNumber" />
                </div>

                <div style="padding-left: 15em">
                    <h4>@Localizer["Actions"]</h4>
                    <button class="button" type="submit">@Localizer["Save"]</button>
                    <button class="button" @onclick="Print">@Localizer["PrintPreview"]</button>
                    <button class="button" @onclick="Example">@Localizer["Example"]</button>
                    <button class="button" @onclick="Reset">@Localizer["Reset"]</button>
                    <div style="padding-top: 4pt">
                        <button class="button" @onclick=SaveAsFile>@Localizer["DownloadAsJson"]</button>
                        <button class="button" onclick="document.getElementById('uploadJson').click()">@Localizer["UploadJsonFile"]</button>
                        <InputFile Id="uploadJson" OnChange="@UploadFile" accept=".json" hidden />
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
}

@code {
    CargoWagon Data = new CargoWagon();
    Owner Owner = new Owner();
    string? ErrorMessage;

    protected async override Task OnInitializedAsync()
    {
        //await LocalStorage.SetItemAsync("Loco", Loco.Example);
        Owner = await LocalStorage.GetItemAsync<Owner>("Owner") ?? Owner.Default;
        Data = await LocalStorage.GetItemAsync<CargoWagon>("CargoWagon") ?? CargoWagon.Default;
    }

    private async Task OnValidSubmit()
    {
        if (HasData)
        {
            await LocalStorage.SetItemAsync("CargoWagon", Data);
            await LocalStorage.SetItemAsync("Owner", Owner);
        }
    }

    private async Task UploadFile(InputFileChangeEventArgs e)
    {
        await using var stream = new MemoryStream();
        try
        {
            await e.File.OpenReadStream().CopyToAsync(stream);
            stream.Position = 0;
            Data = await JsonSerializer.DeserializeAsync<CargoWagon>(stream) ?? CargoWagon.Default;
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }

    }

    private async Task SaveAsFile()
    {
        if (HasData)
        {
            var json = System.Text.Json.JsonSerializer.Serialize(Data, typeof(CargoWagon), new JsonSerializerOptions() { WriteIndented = true });
            await BlazorDownloadFileService.DownloadFileFromText($"{Data.OperatorSignature}_{Data.VehicleClass}_{Data.VehicleNumber}.json", json, System.Text.Encoding.UTF8, "application/json");
        }
    }

    async Task Print()
    {
        await OnValidSubmit();
        Navigator.NavigateTo("printcargowagon");
    }

    async Task Example()
    {
        await OnValidSubmit();
        Data = CargoWagon.Example;
    }

    void Reset()
    {
        Data = CargoWagon.Default;
    }

    void Clear()
    {
        ErrorMessage = null;
    }

    Marking Marking => Data.Marking;

    bool HasData => Data is not null && Owner is not null;

}

